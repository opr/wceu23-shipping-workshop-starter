/**
 * External dependencies
 */
import { useEffect, useState, useCallback } from '@wordpress/element';
import { SelectControl, TextareaControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect, useDispatch } from '@wordpress/data';
import { debounce } from 'lodash';
import { getSetting } from '@woocommerce/settings';
import { extensionCartUpdate } from '@woocommerce/blocks-checkout';

/**
 * Internal dependencies
 */
import { options } from './options';

/**
 * üìù Using `getSetting` from `@woocommerce/settings` get the 'shipping-workshop_data' key, and store the defaultLabelText in a variable.
 * Update the hardcoded label text with the defaultLabelText variable.
 */
const { defaultLabelText } = getSetting( 'shipping-workshop_data', '' );

export const Block = ( { checkoutExtensionData, extensions } ) => {
	/**
	 * setExtensionData will update the wc/store/checkout data store with the values supplied. It can be used to pass
	 * data from the client to the server when submitting the checkout form.
	 */
	const { setExtensionData } = checkoutExtensionData;
	/**
	 * Debounce the setExtensionData function to avoid multiple calls to the API when rapidly changing options.
	 */
	// eslint-disable-next-line react-hooks/exhaustive-deps
	const debouncedSetExtensionData = useCallback(
		debounce( ( namespace, key, value ) => {
			setExtensionData( namespace, key, value );
		}, 1000 ),
		[ setExtensionData ]
	);

	const validationStoreKey = 'shipping-workshop-other-value';

	const { setValidationErrors, clearValidationError } = useDispatch(
		'wc/store/validation'
	);

	const validationError = useSelect( ( select ) => {
		const store = select( 'wc/store/validation' );
		/**
		 * üìù Write some code to get the validation error from the `wc/store/validation` data store.
		 *
		 * The `validationStoreKey` variable can be used to get the validation error. Documentation on the validation
		 * data store can be found here:
		 * https://github.com/woocommerce/woocommerce-blocks/blob/trunk/docs/third-party-developers/extensibility/data-store/validation.md
		 */
	} );
	const [
		selectedAlternateShippingInstruction,
		setSelectedAlternateShippingInstruction,
	] = useState( 'try-again' );
	const [ otherShippingValue, setOtherShippingValue ] = useState( '' );

	/* Handle changing the select's value */
	useEffect( () => {
		/**
		 * üìù Write some code in this useEffect that will run when the `selectedAlternateShippingInstruction` value changes.
		 * This code should:
		 * 1. Update the `alternateShippingInstruction` value in the `shipping-workshop` namespace of the checkout data store.
		 * 2. If the `selectedAlternateShippingInstruction` is not `other`, clear the validation error for the `shipping-workshop-other-value` field.
		 * 3. If the `selectedAlternateShippingInstruction` is `other`, set the validation error for the `shipping-workshop-other-value` field.
		 * 4. Ensure the `setExtensionData` function is not called multiple times. We can use the `debouncedSetExtensionData` function for this.
		 */
	}, [
		clearValidationError,
		setValidationErrors,
		setExtensionData,
		selectedAlternateShippingInstruction,
	] );

	/* Handle changing the "other" value */
	useEffect( () => {
		/**
		 * üìù Write some code in this useEffect that will run when the `otherShippingValue` value changes.
		 * This code should:
		 * 1. Update the `alternateShippingInstruction` value in the `shipping-workshop` namespace of the checkout data store.
		 * 2. If the `otherShippingValue` is not empty, clear the validation error for the `shipping-workshop-other-value` field.
		 * 3. If the `otherShippingValue` is empty, set the validation error for the `shipping-workshop-other-value` field.
		 * 4. Ensure the `setExtensionData` function is not called multiple times. We can use the `debouncedSetExtensionData` function for this.
		 */
	}, [
		selectedAlternateShippingInstruction,
		validationError,
		debouncedSetExtensionData,
		otherShippingValue,
		setValidationErrors,
		clearValidationError,
	] );

	return (
		<div className="wp-block-shipping-workshop-not-at-home">
			<SelectControl
				label={ __(
					'If I am not at home please‚Ä¶',
					'shipping-workshop'
				) }
				value={ selectedAlternateShippingInstruction }
				options={ options }
				onChange={ setSelectedAlternateShippingInstruction }
			/>

			{ selectedAlternateShippingInstruction === 'other' && (
				<>
					<TextareaControl
						className={
							'shipping-workshop-other-textarea' +
							( validationError?.hidden === false
								? ' has-error'
								: '' )
						}
						onChange={ setOtherShippingValue }
						value={ otherShippingValue }
						required={ true }
						placeholder={ __(
							'Enter shipping instructions',
							'shipping-workshop'
						) }
					/>
					{ /**
					 * üìù Write some code in this block that will render a validation error if the validation error
					 * we're using in the wc/store/validation data store is not hidden. It's fine to just use a div,
					 * and display the `message` property of the validation error.
					 */ }
				</>
			) }
		</div>
	);
};
